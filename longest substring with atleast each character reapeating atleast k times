  int solve(string s,int k,int start,int end){
        if(k>end-start+1)return 0;
        if(start<0||start>end||end<0)return 0;
        if(k==0||k==1)return end-start+1;
        
         unordered_map<char,int>mp;
       for(int i=start;i<=end;i++){
            mp[s[i]]++;
           }
        for(int i=start;i<=end;i++){
            cout<<i<<endl;
            if(mp[s[i]]<k){
                
               return max(solve(s,k,start,i-1),solve(s,k,i+1,end));
            }
        }
        return end-start+1;
    }
    int longestSubstring(string s, int k) {
       
    return  solve(s,k,0,s.size()-1);
    
    }
